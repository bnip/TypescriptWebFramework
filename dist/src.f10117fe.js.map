{"version":3,"sources":["src/models/Model.ts","src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;AEAA,AFsBA,IEtBA,AFsBA,KAAA,CEtBA,GAAA,OAAA,CAAA,eAAA,CAAA;AFsBA;AEpBA,AFoBA,IEpBM,IAAI,GAAG,CFoBb,GEpBiB,MAAA,CAAA,IAAJ,CAAS;AAAE,AFqBtB,EErBsB,IAAI,EAAE,GFqB5B,KAAA,CACU,GEtBU,OFqBpB,EAEU,MAFV,EAGU,IAHV,EAGuB;AExBmB,AFsBhC,EEtBgC,GAAG,EAAE,EFsBrC,UAAA,GAAA,UAAA;AEtBU,AFuBV,CEvBC,CAAb,OFuBY,MAAA,GAAA,MAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACN;;AAIJ,EAAA,MAAA,CAAA,cAAA,CAAI,KAAA,CAAA,SAAJ,EAAI,IAAJ,EAAM;AAFN;AACA;SACA,eAAA;AACE,aAAO,KAAK,MAAL,CAAY,EAAnB;AACD,KAFK;oBAAA;;AAAA,GAAN;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,KAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;SAAX,eAAA;AACE,aAAO,KAAK,MAAL,CAAY,OAAnB;AACD,KAFU;oBAAA;;AAAA,GAAX;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,KAAA,CAAA,SAAJ,EAAI,KAAJ,EAAO;ACvCT,IAAA,KDuCE,ECvCF,GAAA,OAAA,CAAA,EDuCE,OCvCF,CAAA;ADwCI,aAAO,KAAK,UAAL,CAAgB,GAAvB;AACD,AC/BH,IAAM,CD6BG,MC7BI,GAAG,6BAAhB;oBD6BS;AC3BT,IAAA,IAAA;AD2BS,AC3BT,GD2BE;AC3BF,UAAA,MAAA,EAAA;AD+BE,AC/BwB,ED+BxB,AC/BwB,KD+BxB,CAAA,GC/BwB,CAAA,IAAA,CD+BxB,CAAA,AC/BwB,GD+BxB,GAAA,AC/BwB,CAAA,SD+BpB,MAAJ,EAAa;AACX,SAAK,UAAL,CAAgB,GAAhB,CAAoB,MAApB;AACA,ACjCJ,SDiCS,ECjCT,IDiCI,ACjCJ,CDiCgB,ECjChB,KDiCI,CAAoB,QAApB;AACD,GAHD;AC/B2C;ADoC3C,EAAA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAA,ACpC0C,QDoC1C,CCpC0C,IDoC1C,ACpC0C,GDoC1C,IAAA;ACpCF,CAAA,CAA0B,OAAA,CAAA,KAA1B,CAAA;ADqCI,QAAM,EAAE,GAAG,KAAK,GAAL,CAAS,IAAT,CAAX;ACrCS,OAAA,CAAA,IAAA,GAAA,IAAA;ADuCT,QAAI,OAAO,EAAP,KAAc,QAAlB,EAA4B;AAC1B,YAAM,IAAI,KAAJ,CAAU,4BAAV,CAAN;AACD;;AAED,SAAK,IAAL,CAAU,KAAV,CAAgB,EAAhB,EAAoB,IAApB,CAAyB,UAAC,QAAD,EAAwB;AAC/C,MAAA,KAAI,CAAC,GAAL,CAAS,QAAQ,CAAC,IAAlB;AACD,KAFD;AAGD,GAVD;;AAYA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,IAAL,CACG,IADH,CACQ,KAAK,UAAL,CAAgB,MAAhB,EADR,EAEG,IAFH,CAEQ,UAAC,OAAD,EAAuB;AAC3B,MAAA,KAAI,CAAC,OAAL,CAAa,MAAb;AACD,KAJH,EAKG,KALH,CAKS,YAAA;AACL,MAAA,KAAI,CAAC,OAAL,CAAa,OAAb;AACD,KAPH;AAQD,GATD;;AAUF,SAAA,KAAA;AAhDA,CAAA,EAAA;;AAAa,OAAA,CAAA,KAAA,GAAA,KAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["import { AxiosPromise, AxiosResponse } from 'axios';\n\ninterface ModelAttributes<T> {\n  set(value: T): void;\n  getAll(): T;\n  get<K extends keyof T>(key: K): T[K];\n}\n\ninterface Sync<T> {\n  fetch(id: number): AxiosPromise;\n  save(data: T): AxiosPromise;\n}\n\ninterface Events {\n  on(eventName: string, callback: () => void): void;\n  trigger(eventName: string): void;\n}\n\ninterface HasId {\n  id?: number;\n}\n\nexport class Model<T extends HasId> {\n  constructor(\n    private attributes: ModelAttributes<T>,\n    private events: Events,\n    private sync: Sync<T>\n  ) {}\n\n  // We are not trying to call a function right here.\n  // Instead we are trying to return a reference to the events.on() method\n  get on() {\n    return this.events.on;\n  }\n\n  get trigger() {\n    return this.events.trigger;\n  }\n\n  get get() {\n    return this.attributes.get;\n  }\n\n  set(update: T): void {\n    this.attributes.set(update);\n    this.events.trigger('change');\n  }\n\n  fetch(): void {\n    const id = this.get('id');\n\n    if (typeof id !== 'number') {\n      throw new Error('Cannot fetch without an id');\n    }\n\n    this.sync.fetch(id).then((response: AxiosResponse): void => {\n      this.set(response.data);\n    });\n  }\n\n  save(): void {\n    this.sync\n      .save(this.attributes.getAll())\n      .then((reponse: AxiosResponse): void => {\n        this.trigger('save');\n      })\n      .catch(() => {\n        this.trigger('error');\n      });\n  }\n}\n","import { Model } from './Model';\n\nexport interface UserProps {\n  // By adding question marks we make the properties optional.\n  // This gives us the flexiblity to update only one property if we wanted to\n  id?: number;\n  name?: string;\n  age?: number;\n}\n\nconst rooturl = 'http://localhost:3000/users';\n\nexport class User extends Model<UserProps> {}\n","import { User } from './models/User';\n\nconst user = new User({ name: 'new record', age: 0 });\n"]}